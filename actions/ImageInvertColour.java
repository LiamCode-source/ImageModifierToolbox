// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagemodifiertoolbox.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.awt.image.BufferedImage;
import com.mendix.core.Core;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import imagemodifiertoolbox.global.CheckFile;

/**
 * Inverts the colour of an image
 */
public class ImageInvertColour extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __OriginalImage;
	private system.proxies.Image OriginalImage;

	public ImageInvertColour(IContext context, IMendixObject OriginalImage)
	{
		super(context);
		this.__OriginalImage = OriginalImage;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.OriginalImage = this.__OriginalImage == null ? null : system.proxies.Image.initialize(getContext(), __OriginalImage);

		// BEGIN USER CODE
		
		String filename = OriginalImage.getName();
		String[] validExt = {"jpeg", "jpg", "png", "JPG", "PNG"};
		
		String extension = CheckFile.getFIleExt(filename);		
		boolean isValidExt = CheckFile.checkFileExt(extension, validExt);
		
		// Checks image is in valid format for modification
		if (!isValidExt) {
			Core.getLogger("ImageModifier").error("The file must be a jpg, jpeg or png file.");
		}
		else {	
			if (__OriginalImage == null) {
				throw new NullPointerException("No image provided.");
			} 
			else if (OriginalImage.getHasContents() != true) {
				Core.getLogger("ImageModifier").error("The input image has no contents.");
				return false;
			} 
			else {
				IContext context = this.getContext();

				BufferedImage image = null;
				BufferedImage invertedImage = null;
				InputStream inputStream = null;
				ByteArrayOutputStream outputStream = null;
				
				try {

					image = ImageIO.read(Core.getImage(context, __OriginalImage, false));
					
					invertedImage = invertedTransform(image);
					
					outputStream = new ByteArrayOutputStream();
					ImageIO.write(invertedImage, extension, outputStream);
					inputStream = new ByteArrayInputStream(outputStream.toByteArray());
					// Stores modified image
					Core.storeImageDocumentContent(context, __OriginalImage, inputStream, 100, 100);
					return true;

				} catch (NullPointerException e) {
					Core.getLogger("ImageModifier").error(e.getMessage(), e);
					return false;
				} catch (Exception e) {
					Core.getLogger("ImageModifier").error(e.getMessage(), e);
					return false;
				} finally {
					inputStream.close();
					outputStream.close();
					}
				}
			}
			return true;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ImageInvertColour";
	}

	// BEGIN EXTRA CODE
	public BufferedImage invertedTransform(BufferedImage image) {	

        // Convert to negative
        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                int p = image.getRGB(x, y);
                int a = (p >> 24) & 0xff;
                int r = (p >> 16) & 0xff;
                int g = (p >> 8) & 0xff;
                int b = p & 0xff;

                // subtract RGB from 255
                r = 255 - r;
                g = 255 - g;
                b = 255 - b;

                // set new RGB value
                p = (a << 24) | (r << 16) | (g << 8) | b;
                image.setRGB(x, y, p);
            }
        }	
		return image;
	}
	// END EXTRA CODE
}
