// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagemodifiertoolbox.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.awt.Graphics2D;
import com.mendix.core.Core;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import java.io.File;
import java.awt.image.*;
import java.awt.*;
import java.math.BigDecimal;
import imagemodifiertoolbox.global.CheckFile;

/**
 * Blurs an image
 */
public class ImageBlur extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __OriginalImage;
	private system.proxies.Image OriginalImage;
	private java.math.BigDecimal BlurScale;

	public ImageBlur(IContext context, IMendixObject OriginalImage, java.math.BigDecimal BlurScale)
	{
		super(context);
		this.__OriginalImage = OriginalImage;
		this.BlurScale = BlurScale;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.OriginalImage = this.__OriginalImage == null ? null : system.proxies.Image.initialize(getContext(), __OriginalImage);

		// BEGIN USER CODE
		String filename = OriginalImage.getName();
		String[] validExt = {"jpeg", "jpg", "png", "JPG", "PNG"};
		
		String extension = CheckFile.getFIleExt(filename);		
		boolean isValidExt = CheckFile.checkFileExt(extension, validExt);
		
		// Checks image is in valid format for modification
		if (!isValidExt) {
			Core.getLogger("ImageModifier").error("The file must be a jpg, jpeg or png file.");
		}
		else {	
			if (__OriginalImage == null) {
				throw new NullPointerException("No image provided.");
			} 
			else if (OriginalImage.getHasContents() != true) {
				Core.getLogger("ImageModifier").error("The input image has no contents.");
				return false;
			} 
			else {
				IContext context = this.getContext();

				BufferedImage image = null;
				BufferedImage blurredImage = null;
				InputStream inputStream = null;
				ByteArrayOutputStream outputStream = null;
				
				try {

					image = ImageIO.read(Core.getImage(context, __OriginalImage, false));
					float floatBlurScale = -1.0f;
					
					if (BlurScale != null && BlurScale.compareTo(BigDecimal.ZERO) >= 0 && BlurScale.compareTo(BigDecimal.ONE) < 1) {floatBlurScale = BlurScale.floatValue();}
					else {Core.getLogger("ImageModifier").warn("Invalid blur scale, Blur effect will not be applied.");}
					if (floatBlurScale < 0.0f) {
						return false; // No blur
					}
					
					int maxKernelSize = 21; // Max blur
					int size = (int)(floatBlurScale * (maxKernelSize - 3)) + 3;
					if (size % 2 == 0) size++; // Ensure it's odd
					
			        float[] matrix = createGaussianKernel(size);
					Kernel kernel = new Kernel(size, size, matrix);
					ConvolveOp op = new ConvolveOp(kernel, 2, null);

					blurredImage = op.filter(image, null);
					
					outputStream = new ByteArrayOutputStream();
					ImageIO.write(blurredImage, extension, outputStream);
					inputStream = new ByteArrayInputStream(outputStream.toByteArray());
					// Stores modified image
					Core.storeImageDocumentContent(context, __OriginalImage, inputStream, 100, 100);
					return true;

				} catch (NullPointerException e) {
					Core.getLogger("ImageModifier").error(e.getMessage(), e);
					return false;
				} catch (Exception e) {
					Core.getLogger("ImageModifier").error(e.getMessage(), e);
					return false;
				} finally {
					if(inputStream != null){inputStream.close();}
					if(outputStream != null){outputStream.close();}
					}
				}
			}
			return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ImageBlur";
	}

	// BEGIN EXTRA CODE
	public float[] createGaussianKernel(int size) {	
		float[] kernel = new float[size * size];
        float sigma = size / 3.0f;
        float mean = size / 2.0f;
        float sum = 0f;

        for (int y = 0; y < size; y++) {
            for (int x = 0; x < size; x++) {
                float val = (float)Math.exp(-0.5 * (
                    Math.pow((x - mean) / sigma, 2.0) + Math.pow((y - mean) / sigma, 2.0)
                ));
                kernel[y * size + x] = val;
                sum += val;
            }
        }
        // Normalise the kernel
        for (int i = 0; i < kernel.length; i++) {
            kernel[i] /= sum;
        }
        return kernel;
	}
	// END EXTRA CODE
}
