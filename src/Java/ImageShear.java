// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagemodifiertoolbox.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.awt.image.BufferedImage;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import com.mendix.core.Core;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import java.math.BigDecimal;

/**
 * Applies shear transformation to image
 */
public class ImageShear extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __OriginalImage;
	private system.proxies.Image OriginalImage;
	private java.math.BigDecimal xShear;
	private java.math.BigDecimal yShear;

	public ImageShear(IContext context, IMendixObject OriginalImage, java.math.BigDecimal xShear, java.math.BigDecimal yShear)
	{
		super(context);
		this.__OriginalImage = OriginalImage;
		this.xShear = xShear;
		this.yShear = yShear;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.OriginalImage = this.__OriginalImage == null ? null : system.proxies.Image.initialize(getContext(), __OriginalImage);

		// BEGIN USER CODE
		String filename = OriginalImage.getName();
		String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
		
		// Checks image is in valid format for modification
		if (!extension.equals("jpg") && !extension.contentEquals("jpeg") && !extension.contentEquals("png")) {
			Core.getLogger("ImageModifier").error("The file must be a jpg, jpeg or png file.");
		}
		else {	
			if (__OriginalImage == null) {
				throw new NullPointerException("No image provided.");
			} 
			else if (OriginalImage.getHasContents() != true) {
				Core.getLogger("ImageModifier").error("The input image has no contents.");
				return false;
			} 
			else {
				IContext context = this.getContext();

				BufferedImage image = null;
				BufferedImage shearedImage = null;
				InputStream inputStream = null;
				ByteArrayOutputStream outputStream = null;
				
				try {

					image = ImageIO.read(Core.getImage(context, __OriginalImage, false));
					
					// If no values given, assume default values
					if (xShear == null) {xShear = new BigDecimal("1");}
					if (yShear == null) {yShear = new BigDecimal("1");}

					shearedImage = shearTransform(image, xShear.floatValue(), yShear.floatValue());
					outputStream = new ByteArrayOutputStream();
					ImageIO.write(shearedImage, extension, outputStream);
					inputStream = new ByteArrayInputStream(outputStream.toByteArray());
					// Stores modified image
					Core.storeImageDocumentContent(context, __OriginalImage, inputStream, 100, 100);
					return true;

				} catch (NullPointerException e) {
					Core.getLogger("ImageModifier").error(e.getMessage(), e);
					return false;
				} catch (Exception e) {
					Core.getLogger("ImageModifier").error(e.getMessage(), e);
					return false;
				} finally {
					inputStream.close();
					outputStream.close();
					}
				}
			}
			return true;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ImageShear";
	}

	// BEGIN EXTRA CODE
	public BufferedImage shearTransform(BufferedImage image, float xShear, float yShear) {

		AffineTransform tx = AffineTransform.getShearInstance(xShear, yShear);
		// Applies shear transformation to image
		AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
		image = op.filter(image, null);
		return image;

	}
	// END EXTRA CODE
}
